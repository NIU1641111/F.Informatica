#include <stdio.h>
#include <stdlib.h>
#define N 512

int Mat1[N][N];
int Mat2[N][N];
int tempM1M2[N][N];
int tempTransM1M2[N][N];
int Vect1[N];
int Vect2[N];
int tempV1V2[N];
//int VectRes[N];
int tempC[N];
int i,j,k;

//Operacion para crear matrices y vectores
void initMats() {
	int i, j;
	srand(8824553);
	for ( i=0; i < N; i++ ){
		for(j = 0; j < N; j++){
			Mat1[i][j] = rand()%100;
			Mat2[i][j] = rand()%100;
		}}
	for( i=0; i < N; i++ ){
		Vect1[i] = rand()%100;
		Vect2[i] = rand()%100;
	}
}

//Operacion de la multiplicacion
int mulMat (int Mat1[N][N], int Mar2[N][N], int tempM1M2[N][N]){
int j,k,i;
	for (i=0;i<N;i++)
		{for (j=0;j<N;j++)
			{ tempM1M2[i][j]=0;
				for (k=0;k<N;k++)
					{tempM1M2[i][j]+=Mat1[i][k]*Mat2[k][j];
					}
			}
		}
	return tempM1M2[N][N];
	}
	
//Operacion matricial SAXPY [Z=ßX+Y]
int Saxpy(int b, int Vect1[N], int Vect2[N], int tempV1V2[N]){
//ß→4
int i;
	for (i=0;i<N;i++){
		tempV1V2[i] = Vect1[i]*k+Vect2[i];
		}
	return tempV1V2[N];
		}
//Operacion para calcular la matriz transpuesta
void transMat(int tempM1M2[N][N], int tempTransM1M2[N][N]){
int j,i;
	for (i=0;i<N;i++)
		{for (j=0;j<N;j++)
			{tempTransM1M2[j][i] = tempM1M2[i][j];
			}
			}
	}

//Operacion sumar elementos de la diagonal
int sumDiagonal(int tempTransM1M2[N][N]){
int i,j, suma = 0;
	for (i=0;i<N;i++){
		for (j=0;j<N;j++){
			if (i==j){
				suma+=Mat1[i][j];
				}
				}
				}
	return suma;
				}


//Operacion sumar los elementos de las columnas
void sumElement(int tempM1M2[N][N], int tempC[N]){
int i,j,suma;	
	for (j=0;j<N;j++)
	{
		suma = 0;
		for (i=0;i<N;i++)
		{
			suma+=tempM1M2[i][j];
		}
		tempC[j]=suma;
	}
}
		
//Operacion permutar dos filas de una matriz
int PermutaF(int f1, int f2, int mat[N][N]){
//filas 5 i 10 → Mat1
//filas 100 i 512 → Mat2
int i, j, aux;

	if(f1>N || f2>N ) {
		return 0;
		}
	else {
		for(j=0; j<N; j++){
			aux = mat[f1-1][j];
			mat[f1-1][j] = mat[f2-1][j];
			mat[f2-1][j] = aux;
		}
		return 1;
		
	}
	}


//Programa general

int main(){
initMats();
printf ("Multiplicació de Mat1 * Mat2 =");
mulMat (Mat1[N][N], Mat2[N][N], tempM1M2[N][N]);
	for (j=10;j<19;j++){
		i=10;
		printf("%d ", tempM1M2[i][j]);
			printf("\n");
			}
printf ("Equació SAXPY (b=4) =");
Saxpy(4, Vect1[N], Vect2[N], tempV1V2[N]);
 	for (i=100;i<119;i++){
		printf("%d ", tempV1V2[i]);
		printf("\n");
	}
printf ("Matriz transpuesta de tempM1M2 = ");
transMat(tempM1M2[N][N], tempTransM1M2[N][N]);
	for (i=10;i<19;i++){
 		j = 10;
		printf("%d ", tempTransM1M2[i][j]);
		printf("\n");
	}
printf ("Permutarem les files 5 i 10 de Mat1 =");
printf ("%d", PermutaF(5 , 10 , Mat1[N][N]));
printf ("Permutarem les files 100 i 512 de Mat2 =");
printf ("%d", PermutaF(100 , 512 , Mat2[N][N]));
printf ("Suma dels elements de la diagonal de la matriu tempTransM1M2 = ");
printf("%d", sumDiagonal(tempTransM1M2[N][N]));
printf ("Suma dels elements de les columnes de la matriz tempM1M2 =");
sumElement(tempM1M2[N][N], tempC[N]);
	for (i=400;i<419;i++){
		printf("%d ", tempV1V2[i]) ;
		printf("\n") ;
	}
}



